create database BUR_webpage;
use BUR_webpage;

create table patient(
Ssn int not null,
Name varchar(100) not null,
Age int not null,
Priority int not null,
Waitlist bool not null,
Phone varchar(10) not null unique,
Pref_date date not null,
primary key (Ssn)
);

create table batch(
Batch_no int not null auto_increment,
Manufacturer varchar(50) not null,
Exp_date date not null,
primary key (Batch_no)
);

create table dose(
    Tracking_no int not null auto_increment,
    Batch_no int not null,
    Status enum("expired", "available", "used", "reserved") not null,
    primary key (Tracking_no),
    foreign key (Batch_no) references batch(Batch_no)
);

create table appointment(
    P_Ssn int not null,
    Tracking_no int not null,
    Date date not null,
    primary key (P_Ssn, Tracking_no),
    foreign key (P_Ssn) references patient(Ssn),
    foreign key (Tracking_no) references dose(Tracking_no)
);

CREATE USER 'bur'@'localhost' IDENTIFIED BY 'bur';
GRANT ALL PRIVILEGES ON * . * TO 'bur'@'localhost';
FLUSH PRIVILEGES;
ALTER USER 'bur'@'localhost' IDENTIFIED WITH mysql_native_password BY 'bur';

-- this trigger is called before the patient relation is deleted
-- the web application needs to delete the patient relation
-- when the patient decides to cancel.
-- additionally, all this does is make the dose available (and delete the appt)
-- the web application needs to reallocate the dose to
-- another patient right after this

create trigger reallocate_on_patient_cancellation
before delete
on patient for each row
begin
-- dose goes from reserved to available
    declare pssn int;
    declare dose_tracking int;
    set pssn = OLD.Ssn;

    cancelled_apt = select * from appointment as a
    where a.P_Ssn = pssn
    -- find dose
    set dose_tracking = a.Tracking_no

    -- set dose to available
    dose_to_reallocate = select * from dose as d
    where d.Tracking_no = dose_tracking

    -- update dose
    --dose_to_reallocate.Status = "available"

-- delete appointment
    -- delete cancelled_apt

end;

delimiter;